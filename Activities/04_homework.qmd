---
title: "04 Homework"
format:
  pdf: default
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(rvest)
library(httr)
```

```{r}
#| message: false
#| warning: false

library(tidyverse)

#spotify <- read_csv("Data/spotify.csv") 
spotify <- read_csv("https://joeroith.github.io/264_spring_2025/Data/spotify.csv")

spot_smaller <- spotify |>
  select(
    title, 
    artist, 
    album_release_date, 
    album_name, 
    subgenre, 
    playlist_name
  )

spot_smaller <- spot_smaller[c(5, 32, 49, 52, 83, 175, 219, 231, 246, 265), ]
spot_smaller
```

1. Identify the input type and output type for each of these examples:

str_view(spot_smaller$subgenre, "pop") 
typeof(str_view(spot_smaller$subgenre, "pop")) 
class(str_view(spot_smaller$subgenre, "pop")) 
input: character vector, output: stringr_view

str_view(spot_smaller$subgenre, "pop", match = NA) 
input: character vector, output: stringr_view

str_view(spot_smaller$subgenre, "pop", html = TRUE) 
input: list, output: str_view

str_subset(spot_smaller$subgenre, "pop") 
input: character, output: character vector

str_detect(spot_smaller$subgenre, "pop") 
input: character vector, output: logical vector


2. Use str_detect to print the rows of the spot_smaller tibble containing songs that have "pop" in the subgenre. (i.e. make a new tibble with fewer rows)

```{r}
pop <- spot_smaller |>
  mutate(is_pop = str_detect(spot_smaller$subgenre, "pop")) |>
  filter(is_pop == "TRUE") |>
  select(-is_pop)
```

3. Find the mean song title length for songs with "pop" in the subgenre and songs without "pop" in the subgenre.  

```{r}
mean_pop <- pop |>
  mutate(title_length = str_length(title),
         mean_title_length = mean(title_length))

pop2 <- spot_smaller |>
  mutate(is_pop = str_detect(spot_smaller$subgenre, "pop")) |>
  mutate(title_length = str_length(title)) |>
  group_by(is_pop) |>
  summarize(mean_title_length = mean(title_length)) 
```

Producing a table like this would be great:

# A tibble: 2 × 2
  sub_pop mean_title_length
  <lgl>               <dbl>
1 FALSE                18.6
2 TRUE                 13.6

Producing a table like this would be SUPER great (hint: ifelse()):

# A tibble: 2 × 2
  sub_pop           mean_title_length
  <chr>                         <dbl>
1 Genre with pop                 13.6
2 Genre without pop              18.6

4. In the bigspotify dataset, find the proportion of songs which contain "love" in the title (track_name) by playlist_genre.

```{r}
bigspotify <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv')

bigspotify
```

```{r}
bigspotify |>
  mutate(track_name = str_to_lower(track_name)) |>
  group_by(playlist_genre) |>
  summarize(prop_love = mean(str_detect(track_name, "love"), na.rm = TRUE))
```

5. Given the corpus of common words in stringr::words, create regular expressions that find all words that:

- Start with “y”.
- End with “x”
- Are exactly three letters long.
- Have seven letters or more.
- Start with a vowel.
- End with ed, but not with eed.
- Words where q is not followed by u. (are there any in `words`?)


# Try using str_view() or str_subset()
str_view(words, "^y")
str_view(words, "x$")
str_view(words, "^...$")
str_view(words, "^.......")
str_view(words, "^[aeiou]")
str_view(words, "[^e]ed$")
str_view(words, "q[^u]")

# For example, to find words with "tion" at any point, I could use:
str_view(words, "tion")
str_subset(words, "tion")

6. In bigspotify, how many track_names include a $?  Be sure you print the track_names you find and make sure the dollar sign is not just in a featured artist!

```{r}
bigspotify |>
  filter(str_detect(track_name, "\\$")) |>
  select(track_name, track_artist) |>
  filter(!str_detect(track_name, "(feat|with).*\\$")) # . indicates any character, * indicates any number of characters
```

7. In bigspotify, how many track_names include a dollar amount (a $ followed by a number).

str_view(bigspotify$track_name, "\\$\\d")

2

8. Modify the first regular expression above to also pick up "A.A" (in addition to "BEYONC" and "II").  That is, pick up strings where there might be a period between capital letters.

str_view(spot_smaller$album_name, "[A-Z](\\.?)[A-Z]")

9. Create some strings that satisfy these regular expressions and explain.

- "^.*$"
- "\\{.+\\}"


str_view("example", "^.*$") #starts with any number of characters and ends with any number of characters

str_view("{example}", "\\{.+\\}") #starts with { and ends with }
str_view("example", "\\{.+\\}")


10. Create regular expressions to find all `stringr::words` that:

- Start with three consonants.
- Have two or more vowel-consonant pairs in a row.


str_view(stringr::words, "^[^aeiou]{3}.*([aeiou]{2,})")


```{r}
str_extract(spot_smaller$album_release_date, "\\d{4}-\\d{2}")

spot_smaller |>
  select(album_release_date) |>
  mutate(year_month = str_extract(album_release_date, "\\d{4}-\\d{2}"))

spot_smaller |>
  select(artist) |>
  mutate(n_vowels = str_count(artist, "[aeiou]"))
```

11. In the spot_smaller dataset, how many words are in each title? (hint \\b)

```{r}
str_count(spot_smaller$title, "\\b[^ ]+\\b")
```

12. In the spot_smaller dataset, extract the first word from every title. Show how you would print out these words as a vector and how you would create a new column on the spot_smaller tibble.  That is, produce this:

```{r}
str_extract(spot_smaller$title, "[^ ]*")
```

```{r}
# [1] "Hear"      "Run"       "Formation" "7/11"      "My"        "It's"     
# [7] "Poetic"    "A.D.H.D"   "Ya"        "Runnin"   
```

Then this:

```{r}
spot_smaller |>
  select(title) |>
  mutate(first_word = str_extract(title, "[^ ]*"))
```

```{r}
# A tibble: 10 × 2
#   title                                             first_word
#   <chr>                                             <chr>     
# 1 Hear Me Now                                       Hear      
# 2 Run the World (Girls)                             Run       
# 3 Formation                                         Formation 
# 4 7/11                                              7/11      
# 5 My Oh My (feat. DaBaby)                           My        
# 6 It's Automatic                                    It's      
# 7 Poetic Justice                                    Poetic    
# 8 A.D.H.D                                           A.D.H.D   
# 9 Ya Estuvo                                         Ya        
#10 Runnin (with A$AP Rocky, A$AP Ferg & Nicki Minaj) Runnin    
```


13. Which decades are popular for playlist_names? Using the bigspotify dataset, try doing each of these steps one at a time!

 - filter the bigspotify dataset to only include playlists that include something like "80's" or "00's" in their title.
 - create a new column that extracts the decade
 - use count to find how many playlists include each decade
 - what if you include both "80's" and "80s"? 
 - how can you count "80's" and "80s" together in your final tibble?

```{r}
bigspotify |>
  filter(str_detect(playlist_name, "\\d\\d('?)s")) |>
  mutate(playlist_decade = str_extract(playlist_name, "\\d\\d('?)s"),
         playlist_decade = str_replace(playlist_decade, "'", "")) |>
  count(playlist_decade) |>
  filter(playlist_decade != "08s")
```

14. Describe to your groupmates what these expressions will match, and provide a word or expression as an example:

- (.)\\1\\1 
  Any character repeated 3 times

str_view("aaa", "(.)\\1\\1")

  
- "(.)(.)(.).*\\3\\2\\1"
  Any word that has any three characters, followed by any number of characters, and then the three characters are repeated backwards.

str_view("abcdecba", "(.)(.)(.).*\\3\\2\\1")
  
Which words in `stringr::words` match each expression?

str_view(stringr::words, "(.)\\1\\1")

none

str_view(stringr::words, "(.)(.)(.).*\\3\\2\\1")

paragraph

15. Construct a regular expression to match words in `stringr::words` that contain a repeated pair of letters (e.g. “church” contains “ch” repeated twice) but *not* match repeated pairs of numbers (e.g. 507-786-3861).

str_view(stringr::words, "([a-z][a-z]).*\\1")

16. Reformat the album_release_date variable in spot_smaller so that it is MM-DD-YYYY instead of YYYY-MM-DD.  (Hint: str_replace().)

```{r}
spot_smaller |>
  mutate(album_release_date = str_replace(album_release_date, "(\\d{4})-(\\d{2})-(\\d{2})", "\\2-\\3-\\1"))
```

17. BEFORE RUNNING IT, explain to your partner(s) what the following R chunk will do:

It will switch the 2nd and 3rd words.

```{r}
sentences |> 
  str_replace("([^ ]+) ([^ ]+) ([^ ]+)", "\\1 \\3 \\2") |> 
  head(5)
```

1. Describe the equivalents of ?, +, * in {m,n} form.

{0,1}, {1, >1}, {0, > 0}r

2. Describe, in words, what the expression "(.)(.)\\2\\1" will match, and provide a word or expression as an example.

Words where some two letter sequence is repeated right after in reverse.

```{r}
word <- c("abba", "abbaca", "abcabc") #the first two are matches
str_detect(word, "(.)(.)\\2\\1")
```

3. Produce an R string which the regular expression represented by "\\..\\..\\.." matches.  In other words, find a string `y` below that produces a TRUE in `str_detect`.

```{r}
expression <- "Y.O.L.O."
str_detect(expression, "\\..\\..\\..")
```

4. Solve with `str_subset()`, using the words from `stringr::words`:

- Find all words that start or end with x.
- Find all words that start with a vowel and end with a consonant.
- Find all words that start and end with the same letter

```{r}
str_subset(stringr::words, "(^x)|(x$)")
str_subset(stringr::words, "^[auiou].*[^aeiou]$")
str_subset(stringr::words, "^(.)(.*)\\1$")
```

5. What words in `stringr::words` have the highest number of vowels? What words have the highest proportion of vowels? (Hint: what is the denominator?)  Figure this out using the tidyverse and piping, starting with `as_tibble(words) |>`.

```{r}
as_tibble(stringr::words) |>
  mutate(num_lett = str_count(value),
         num_vowel = str_count(value, "[aeiou]")) |>
  slice_max(num_vowel)

as_tibble(stringr::words) |>
  mutate(num_lett = str_count(value),
         num_vowel = str_count(value, "[aeiou]"),
         vowel_prop = num_vowel / num_lett) |>
  slice_max(vowel_prop, n = 5)
```

6. From the Harvard sentences data, use `str_extract` to produce a tibble with 3 columns:  the sentence, the first word in the sentence, and the first word ending in "ed" (NA if there isn't one).

```{r}
as_tibble(sentences) |>
  mutate(first_word = str_extract(value, "[^ ]*"),
         first_word_ed = str_extract(value, "[^ ]*ed\\b"))
```

7. Find and output all contractions (words with apostrophes) in the Harvard sentences, assuming no sentence has multiple contractions.

```{r}
str_extract(sentences, "[^ ]*'[^ ]*") 
```

8. *Carefully* explain what the code below does, both line by line and in general terms.

It takes the word and reorders the characters so the last becomes the first and the first becomes the last. Then it joins creates a tibble of words that are the same after being rearranged. 

Code: (I had an issue with rendering even though the code was successful)

temp <- str_replace_all(stringr::words, "^([A-Za-z])(.*)([a-z])$", "\\3\\2\\1") #replaces the first character with the last and the last with the first 
as_tibble(words) |> #turns the list of words into a tibble
  semi_join(as_tibble(temp), by = c("word" = "value")) |> #semi_joins the adjusted words with the whole list of words so only words that are the same or match a different word after being rearranged are shown.
  print(n = Inf) #prints the list of matched words


We will check out the Rotten Tomatoes page for the 2017 movie Coco, scrape information from that page (we'll get into web scraping in a few weeks!), clean it up into a usable format, and answer some questions using strings and regular expressions.

```{r}
#| eval: true

# used to work
# coco <- read_html("https://www.rottentomatoes.com/m/coco_2017")

# robotstxt::paths_allowed("https://www.rottentomatoes.com/m/coco_2017")

library(polite)
coco <- "https://www.rottentomatoes.com/m/coco_2017" |>
  bow() |> 
  scrape()

top_reviews <- 
  "https://www.rottentomatoes.com/m/coco_2017/reviews?type=top_critics" |> 
  bow() |> 
  scrape()
top_reviews <- html_nodes(top_reviews, ".review-text")
top_reviews <- html_text(top_reviews)

user_reviews <- 
  "https://www.rottentomatoes.com/m/coco_2017/reviews?type=user" |> 
  bow() |> 
  scrape()
user_reviews <- html_nodes(user_reviews, ".js-review-text")
user_reviews <- html_text(user_reviews)
```

9. `top_reviews` is a character vector containing the 20 most recent critic reviews (along with some other junk) for Coco, while `user_reviews` is a character vector with the 10 most recent user reviews.

a) Explain how the code below helps clean up both `user_reviews` and `top_reviews` before we start using them.

It removes the empty space before and after a string. 

```{r}
#| eval: false

user_reviews <- str_trim(user_reviews)
top_reviews <- str_trim(top_reviews)
```

b) Print out the critic reviews where the reviewer mentions "emotion" or "cry".  Think about various forms ("cried", "emotional", etc.)  You may want to turn reviews to all lower case before searching for matches.

```{r}
tibble(review = top_reviews) |>
  mutate(review = str_to_lower(review),
         review = str_extract(review, ".*cry.*\\.|.*cri.*\\.|.*emotion.*\\.")) |>
  filter(!is.na(review)) |>
  print()
```

c) In critic reviews, replace all instances where "Pixar" is used with its full name: "Pixar Animation Studios".

```{r}
tibble(review = top_reviews) |>
  mutate(review = str_replace(review, "pixar", "Pixar Animation Studios"))
```

d) Find out how many times each user uses "I" in their review.  Remember that it could be used as upper or lower case, at the beginning, middle, or end of a sentence, etc.

```{r}
tibble(review = user_reviews) |>
  mutate(review = str_to_lower(review),
         i_count = str_count(review, "i "))
```

e) Do critics or users have more complex reviews, as measured by average number of commas used?  Be sure your code weeds out commas used in numbers, such as "12,345".

```{r}
tibble(review = top_reviews) |>
  mutate(comma_count = str_count(review, "[^\\n], ")) |>
  summarize(mean = mean(comma_count))

tibble(review = user_reviews) |>
  mutate(comma_count = str_count(review, "[^\\n], ")) |>
  summarize(mean = mean(comma_count))
```

Users have more complex reviews. 
